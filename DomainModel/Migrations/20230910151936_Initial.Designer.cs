// <auto-generated />
using System;
using DomainModel.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DomainModel.Migrations
{
    [DbContext(typeof(SensorContext))]
    [Migration("20230910151936_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DomainModel.Models.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("MeasurementFrequency")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("SendingDataToServerFrequency")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Sensors");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Sensor");
                });

            modelBuilder.Entity("DomainModel.Models.Telemetry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("MeasurementTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("Telemetries");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Telemetry");
                });

            modelBuilder.Entity("DomainModel.Models.LightSensor", b =>
                {
                    b.HasBaseType("DomainModel.Models.Sensor");

                    b.HasDiscriminator().HasValue("LightSensor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MeasurementFrequency = new TimeSpan(0, 0, 15, 0, 0),
                            SendingDataToServerFrequency = new TimeSpan(0, 1, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("DomainModel.Models.LightTelimetry", b =>
                {
                    b.HasBaseType("DomainModel.Models.Telemetry");

                    b.Property<float>("Illuminance")
                        .HasColumnType("real");

                    b.HasDiscriminator().HasValue("LightTelimetry");
                });

            modelBuilder.Entity("DomainModel.Models.Telemetry", b =>
                {
                    b.HasOne("DomainModel.Models.Sensor", "Sensor")
                        .WithMany("Telemetries")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("DomainModel.Models.Sensor", b =>
                {
                    b.Navigation("Telemetries");
                });
#pragma warning restore 612, 618
        }
    }
}
